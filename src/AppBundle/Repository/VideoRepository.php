<?php

namespace Webberdoo\AppBundle\Repository;

/**
 * VideoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class VideoRepository extends \Doctrine\ORM\EntityRepository
{
    public function findAllAtiveVideosByFeatured()
    {
        return $this->createQueryBuilder('video')
            ->where('video.status = :status')
            ->Andwhere('video.featured = :featured')
            ->setParameter('status', 1)
            ->setParameter('featured', 1)
            ->getQuery()
            ->execute();//get as array of results
    }

    public function getUserVideos($user_slug, $status)
    {
        return $this->createQueryBuilder('video')
            ->andwhere('usr.slug = :slug')
            ->andWhere('video.status = :status' )
            ->setParameter('status', $status)
            ->setParameter('slug', $user_slug)
            ->leftJoin('video.user', 'usr')
            ->addSelect('usr')
            ->getQuery()
            ->execute();
    }

    public function getCategoryVideos($user_slug, $status)
    {
        return $this->createQueryBuilder('video')
            ->andwhere('category.slug = :slug')
            ->andWhere('video.status = :status' )
            ->setParameter('status', $status)
            ->setParameter('slug', $user_slug)
            ->leftJoin('video.category', 'category')
            ->addSelect('category')
            ->getQuery()
            ->execute();
    }


    public function getUserVideoLikes($user_slug, $status)
    {
        return $this->createQueryBuilder('video')
            ->andwhere('usrLikes.slug = :slug')
            ->andWhere('video.status = :status' )
            ->setParameter('status', $status)
            ->setParameter('slug', $user_slug)
            ->leftJoin('video.userLikes', 'usrLikes')
            ->addSelect('usrLikes')
            ->getQuery()
            ->execute();
    }

    public function getUserVideosPaginated($user_slug, $status, $offset ,$maxResults)
    {
        return $this->createQueryBuilder('video')
            ->andwhere('usr.slug = :slug')
            ->andWhere('video.status = :status' )
            ->setParameter('status', $status)
            ->setParameter('slug', $user_slug)
            ->leftJoin('video.user', 'usr')
            ->setFirstResult($offset)
            ->setMaxResults($maxResults)
            ->addSelect('usr')
            ->getQuery()
            ->execute();
    }

    public function getCategoryVideosPaginated($user_slug, $status, $offset ,$maxResults)
    {
        return $this->createQueryBuilder('video')
            ->andwhere('category.slug = :slug')
            ->andWhere('video.status = :status' )
            ->setParameter('status', $status)
            ->setParameter('slug', $user_slug)
            ->leftJoin('video.category', 'category')
            ->setFirstResult($offset)
            ->setMaxResults($maxResults)
            ->addSelect('category')
            ->getQuery()
            ->execute();
    }

    public function getUserVideoLikesPaginated($user_slug, $status, $offset ,$maxResults)
    {
        return $this->createQueryBuilder('video')
            ->andwhere('usrLikes.slug = :slug')
            ->andWhere('video.status = :status' )
            ->setParameter('status', $status)
            ->setParameter('slug', $user_slug)
            ->leftJoin('video.userLikes', 'usrLikes')
            ->setFirstResult($offset)
            ->setMaxResults($maxResults)
            ->addSelect('usrLikes')
            ->getQuery()
            ->execute();
    }

    public function getMostViewedVideosPaginated($number, $offset ,$maxResults)
    {
        return $this->createQueryBuilder('video')
            ->orderBy('video.countVisitor', 'desc')
            ->andwhere('video.countVisitor >= :count')
            ->andWhere('video.status = :status' )
            ->setParameter('status', 1)
            ->setParameter('count', $number)
            ->setFirstResult($offset)
            ->setMaxResults($maxResults)
            ->getQuery()
            ->execute();
    }

    public function getMostViewedVideos($number)
    {
        return $this->createQueryBuilder('video')
            ->orderBy('video.countVisitor', 'desc')
            ->andwhere('video.countVisitor >= :count')
            ->andWhere('video.status = :status' )
            ->setParameter('status', 1)
            ->setParameter('count', $number)
            ->getQuery()
            ->execute();
    }

    public function getTrendingGreaterThanCountPaginated($number, $offset ,$maxResults)
    {
        return $this->createQueryBuilder('video')
            ->orderBy('video.likes', 'desc')
            ->andwhere('video.likes >= :count')
            ->andWhere('video.status = :status' )
            ->setParameter('status', 1)
            ->setParameter('count', $number)
            ->setFirstResult($offset)
            ->setMaxResults($maxResults)
            ->getQuery()
            ->execute();
    }

    public function getTrendingVideos($number)
    {
        return $this->createQueryBuilder('video')
            ->orderBy('video.likes', 'desc')
            ->andwhere('video.likes >= :count')
            ->andWhere('video.status = :status' )
            ->setParameter('status', 1)
            ->setParameter('count', $number)
            ->getQuery()
            ->execute();
    }

    public function getChannelVideos($slug)
    {
        return $this->createQueryBuilder('video')
            ->andwhere('channel.slug = :slug')
            ->andWhere('video.status = :status' )
            ->setParameter('status', 1)
            ->setParameter('slug', $slug)
            ->leftJoin('video.channel', 'channel')
            ->addSelect('channel')
            ->getQuery()
            ->execute();
    }

    public function getChannelVideosPaginated($slug, $offset ,$maxResults)
    {
        return $this->createQueryBuilder('video')
            ->andwhere('channel.slug = :slug')
            ->andWhere('video.status = :status' )
            ->setParameter('status', 1)
            ->setParameter('slug', $slug)
            ->leftJoin('video.channel', 'channel')
            ->setFirstResult($offset)
            ->setMaxResults($maxResults)
            ->addSelect('channel')
            ->getQuery()
            ->execute();
    }

    public function searchVideos($search)
    {
        return $this->createQueryBuilder('video')
            ->andWhere('video.title LIKE :searchTerm' )
            ->andWhere('video.description LIKE :searchDesc' )
            ->setParameter('searchTerm','%'. $search.'%')
            ->setParameter('searchDesc','%'. $search.'%')
            ->getQuery()
            ->execute();
    }

}
